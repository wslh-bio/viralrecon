nextflow_pipeline {

    name "Test pipeline"
    script "../main.nf"
    tag "pipeline"
    profile "test_nanopore"

    test("-profile test_nanopore") {

        when {
            params {
                outdir = "$outputDir"
            }
        }

        then {
            // stable_name: All files + folders in ${params.outdir}/ with a stable name
            def stable_name = getAllFilesFromDir(params.outdir, relative: true, includeDir: true, ignoreFile: 'tests/.nftignore_stable_name', ignore: ['pipeline_info/*.{html,json,txt}', 'nanoplot/*/NanoPlot*.log'])
            // stable_path: All files in ${params.outdir}/ with stable content
            def stable_path = getAllFilesFromDir(params.outdir, ignoreFile: 'tests/.nftignore', ignore: ['kraken2/*.kraken2.classifiedreads.txt', 'kraken2/*.unclassified.fastq.gz', 'nanopolish/*.{vcf,vcf.gz,vcf.gz.tbi,csv}', 'nanopolish/**/*.{vcf,vcf.gz,vcf.gz.tbi,csv,txt}', '**/multiqc_data/bcftools_stats_vqc_*.yaml', '**/multiqc_data/snpeff_qualities.yaml'])
            def softwareYaml = removeNextflowVersion("$outputDir/pipeline_info/nf_core_viralrecon_software_mqc_versions.yml")
            softwareYaml.remove('NEXTCLADE_RUN')
            softwareYaml.remove('PLOT_BASE_DENSITY')

            assertAll(
                { assert workflow.success},
                { assert snapshot(
                    // pipeline versions.yml file for multiqc from which Nextflow version is removed because we test pipelines on multiple Nextflow versions
                    softwareYaml,
                    // All stable path name, with a relative path
                    stable_name,
                    // All files with stable contents
                    stable_path
                ).match() }
            )
        }
    }
}
